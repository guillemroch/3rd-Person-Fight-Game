<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/Assets/AnimatorManager.cs;D:/Documents/Unity/3rd Person Fight Game/Assets/CameraManager.cs;D:/Documents/Unity/3rd Person Fight Game/Assets/InputManager.cs;D:/Documents/Unity/3rd Person Fight Game/Assets/PlayerInputActions.cs;D:/Documents/Unity/3rd Person Fight Game/Assets/PlayerManager.cs;D:/Documents/Unity/3rd Person Fight Game/Assets/PlayerMovement.cs;D:/Documents/Unity/3rd Person Fight Game/Assets/ResetBool.cs;D:/Documents/Unity/3rd Person Fight Game/Assets/ResetGravitySwitch.cs;D:/Documents/Unity/3rd Person Fight Game/Assets/ResetHalfLash.cs;D:/Documents/Unity/3rd Person Fight Game/Assets/ResetJumping.cs;D:/Documents/Unity/3rd Person Fight Game/Packages/manifest.json;D:/Documents/Unity/3rd Person Fight Game/Packages/packages-lock.json;D:/Documents/Unity/3rd Person Fight Game/ProjectSettings/Packages/com.unity.probuilder/Settings.json;D:/Documents/Unity/3rd Person Fight Game/ProjectSettings/BurstAotSettings_StandaloneWindows.json;D:/Documents/Unity/3rd Person Fight Game/ProjectSettings/CommonBurstAotSettings.json;D:/Documents/Unity/3rd Person Fight Game/ProjectSettings/SceneTemplateSettings.json;D:/Documents/Unity/3rd Person Fight Game/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;D:/Documents/Unity/3rd Person Fight Game&quot;:&quot;{\&quot;/Assets/ResetHalfLash.cs\&quot;:\&quot;This file contains a script that is attached to an animator state in Unity to reset a boolean value when exiting that state.\\n\\nKey things it does:\\n\\n- It is a StateMachineBehaviour script, which means it will run code based on state transitions in an Animator controller.\\n\\n- The OnStateExit function is overridden. This function will run whenever the state this is attached to exits.\\n\\n- On exit, it sets the \\\&quot;isHalfLashing\\\&quot; boolean on the Animator back to false. \\n\\n- This boolean is likely used to toggle an animation layer or parameter. Resetting it on exit ensures the animation doesn\\u0027t remain in the \\\&quot;half lashing\\\&quot; state after the state is exited.\\n\\n- No other functions are defined. It simply resets a bool value when the state finishes to clean up the animation state.\\n\\nSo in summary, this script resets an animation parameter to its default value whenever the state it is attached to finishes, to cleanly transition animation states.\&quot;,\&quot;/Assets/PlayerManager.cs\&quot;:\&quot;This PlayerManager.cs file is a central manager class that coordinates all aspects related to controlling the player character.\\n\\nKey functions:\\n\\n- Handles input in Update() by calling the InputManager component. This gets all input from the player.\\n\\n- Handles movement calculations in FixedUpdate() by calling the PlayerMovement component. This determines how the player moves based on input. \\n\\n- Handles camera movement in LateUpdate() by calling the CameraManager component. This controls the camera that follows the player.\\n\\n- Handles animations in LateUpdate() by modifying values on the Animator component. It syncs animation parameters like jumping, grounded, interacting based on player state from PlayerMovement. \\n\\n- Stores some player state values like isInteracting that are set by animations and used by other components.\\n\\n- Gets references to necessary components like InputManager, PlayerMovement etc on awake.\\n\\nSo in summary, it coordinates input, movement, camera and animations for the player character by calling the relevant components and syncing values between them. This centralizes all player logic in one place.\&quot;,\&quot;/Packages/packages-lock.json\&quot;:\&quot;This file is packages-lock.json. It locks down the specific versions of packages that are installed in the Unity project.\\n\\nSome key things it does:\\n\\n- Lists all packages installed via the Unity Package Manager, including both registry packages and builtin modules.\\n\\n- Specifies the version, depth, source, dependencies and URL for each package.\\n\\n- The \\\&quot;depth\\\&quot; indicates the package\\u0027s level in the dependency tree - packages with higher depth have more dependencies. \\n\\n- \\\&quot;dependencies\\\&quot; lists which other packages each one depends on. This ensures all required packages are installed.\\n\\n- \\\&quot;source\\\&quot; is either \\\&quot;registry\\\&quot; for packages from the Unity registry or \\\&quot;builtin\\\&quot; for core Unity modules.\\n\\n- It locks the project to these specific package versions so reopening the project will use the same dependencies.\\n\\n- Prevents package version conflicts and ensures a reproducible and stable dependency tree across machines/builds.\\n\\nSo in summary, it defines and locks the exact dependency tree of all packages installed in the Unity project to provide stability and reproducibility.\&quot;,\&quot;/ProjectSettings/BurstAotSettings_StandaloneWindows.json\&quot;:\&quot;This file contains Burst Ahead-of-Time (AOT) compilation settings for Unity projects built for the standalone Windows platform.\\n\\nThe key functions of this file are:\\n\\n- EnableBurstCompilation - Enables Burst compilation, which compiles Unity scripts to optimized native code using LLVM.\\n\\n- EnableOptimisations - Enables optimizations during Burst compilation like inlining, vectorization, etc. \\n\\n- EnableSafetyChecks - Disables safety checks during compilation like overflow checks. Disabling improves performance but reduces safety.\\n\\n- EnableDebugInAllBuilds - Includes debug symbols in release builds for easier debugging.\\n\\n- DebugDataKind - Sets level of debug data included, with 0 being no debug data.\\n\\n- CpuMin/MaxTargetX32/X64 - Sets minimum and maximum CPU targets for 32-bit and 64-bit builds.\\n\\n- CpuTargetsX32/X64 - Explicitly sets CPU targets for code generation.\\n\\n- OptimizeFor - Sets optimization preference like size, speed.\\n\\nSo in summary, this file configures Burst AOT compilation settings like enabling optimizations, setting CPU targets for better performance on the target platform.\&quot;,\&quot;/ProjectSettings/SceneTemplateSettings.json\&quot;:\&quot;This file (ProjectSettings/SceneTemplateSettings.json) contains settings for scene templates in Unity.\\n\\nKey functions:\\n\\n- templatePinStates - Stores the pin states of objects in scene templates. Pins are used to control whether objects are instantiated or referenced when a template is applied to a scene.\\n\\n- dependencyTypeInfos - Lists all the types of assets that can be dependencies of scene templates (e.g. materials, animations, etc.). Specifies how each type is handled when instantiated.\\n\\n- defaultDependencyTypeInfo - Default settings for any dependency type not explicitly listed. \\n\\n- newSceneOverride - Controls whether new scenes use the default template or a custom one.\\n\\n- defaultInstantiationMode - Specifies whether dependencies are instantiated (copied) or referenced when a template is applied.\\n\\n- supportsModification - Indicates if a dependency type can be modified after being instantiated in a scene.\\n\\nSo in summary, it defines the asset types that can be used in scene templates and how they are instantiated/referenced when a template is applied to a scene. This allows scene templates to act as reusable blueprints or prefabs for scenes.\&quot;,\&quot;/Assets/InputManager.cs\&quot;:\&quot;This InputManager script handles all player input in the game.\\n\\nKey functions:\\n\\n- Awake/OnEnable/OnDisable: Sets up the player input actions on enable and cleans up on disable.\\n\\n- HandleAllInputs: Main input handling function called each frame to process all inputs.\\n\\n- HandleMovementInput: Handles movement input and updates animator values. \\n\\n- HandleCameraInput: Handles camera input (not implemented yet)\\n\\n- HandleSprintingInput: Handles sprint input and toggles sprinting state.\\n\\n- HandleJumpingInput: Handles jump input and calls jump function.\\n\\n- HandleHalfLashInput: Handles half-lash input and calls half-lash function. \\n\\n- HandleSelectLashingDirectionInput: Handles selecting lashing direction input (not implemented yet) \\n\\n- HandleConfirmLashingDirectionInput: Handles confirming lash input and calls full lash function if half-lash is active.\\n\\nIt connects player input to the animator manager and player movement script to control player actions like movement, sprinting, jumping, lashing based on input. It processes all input each frame through the HandleAllInputs function.\&quot;,\&quot;/Assets/ResetBool.cs\&quot;:\&quot;This ResetBool.cs file is used to reset a boolean value on an animator when entering a specific state.\\n\\nKey functions:\\n\\n- It inherits from StateMachineBehaviour, which allows it to hook into animator state transitions.\\n\\n- The isInteractingBool string property specifies the name of the boolean value to reset. \\n\\n- The isInteractingStatus bool property specifies the value to set the boolean to.\\n\\n- The OnStateEnter override method is called when entering the associated state. \\n\\n- OnStateEnter calls Animator.SetBool to reset the boolean value specified by isInteractingBool to the value of isInteractingStatus.\\n\\nSo in summary, it allows resetting a specific boolean on the animator to a given value whenever the associated state is entered as part of the state machine. This is useful for ensuring boolean values are in a known state at the start of animator states.\&quot;,\&quot;/ProjectSettings/Packages/com.unity.probuilder/Settings.json\&quot;:\&quot;This file (Settings.json) contains the project settings for the ProBuilder asset in Unity. \\n\\nSome key things it does:\\n\\n- Stores various ProBuilder preferences and default values as key-value pairs in a dictionary. This allows ProBuilder to remember settings across sessions.\\n\\n- Sets the log level, output, and path for ProBuilder logging.\\n\\n- Specifies default assets for the material palette, vertex color palette, etc. \\n\\n- Stores version information for ProBuilder and the user\\u0027s preferences.\\n\\n- Sets default values for new shapes like pivot location, snapping, collider type, etc.  \\n\\n- Remembers last used settings like select mode, extrude method, UV grid size.\\n\\n- Stores serialized data for the default shape prefabs like prism, arch, stairs templates. \\n\\n- Flags for enabling experimental features, toggling notifications, stripping scripts on build.\\n\\nSo in summary, it centrally manages all of ProBuilder\\u0027s configurable editor settings and preferences in a single file in JSON format. This allows ProBuilder to initialize itself and remember the user\\u0027s custom configuration.\&quot;,\&quot;/ProjectSettings/CommonBurstAotSettings.json\&quot;:\&quot;The ProjectSettings/CommonBurstAotSettings.json file is used to configure settings for Burst Ahead-of-Time (AOT) compilation in Unity.\\n\\nSome key things about this file:\\n\\n- It controls settings for compiling MonoBehaviours with Burst AOT.\\n\\n- The \\\&quot;Version\\\&quot; property specifies the version of the Burst compiler being used.\\n\\n- \\\&quot;DisabledWarnings\\\&quot; allows specifying warnings to ignore during compilation.\\n\\n- Burst AOT compiles C# code into optimized native code ahead of time, rather than interpreting it at runtime. This improves performance.\\n\\n- Configuring settings in this file allows controlling how MonoBehaviours are compiled by Burst, like which warnings to ignore during the process.\\n\\n- Key functions include enabling/disabling Burst AOT compilation for MonoBehaviours and customizing the compilation process by ignoring certain warnings.\\n\\n- It helps optimize Unity games by allowing parts of the code to be compiled to native code for improved runtime performance.\\n\\nSo in summary, this file contains project-wide settings for compiling MonoBehaviour scripts with Burst AOT to native code ahead of time in Unity games.\&quot;,\&quot;/Assets/ResetJumping.cs\&quot;:\&quot;This ResetJumping.cs file is used to reset the \\\&quot;isJumping\\\&quot; boolean value on the animator when exiting a jumping state in the state machine.\\n\\nKey functions:\\n\\n- OnStateExit - This override function is called when exiting the state that this behavior is attached to.\\n\\n- animator.SetBool(\\\&quot;isJumping\\\&quot;, false) - Sets the \\\&quot;isJumping\\\&quot; bool on the animator to false when exiting the state. This resets the jumping flag so that the jumping animation does not persist after exiting the jumping state.\\n\\nSo in summary, this state machine behaviour resets the \\\&quot;isJumping\\\&quot; bool on the animator to false whenever the attached state is exited. This ensures the jumping animation/state is properly reset after a jump is completed in the state machine.\&quot;,\&quot;/Packages/manifest.json\&quot;:\&quot;This file is called manifest.json and it defines the dependencies for a Unity project.\\n\\nSome key things it does:\\n\\n- Lists all the Unity packages/modules that the project depends on and their required versions. This includes both first-party and third-party packages.\\n\\n- Ensures all dependent packages are installed and at the correct versions when someone opens the project. Unity will use this file to automatically resolve and install any missing dependencies.\\n\\n- Allows Unity to manage dependencies and updates in a centralized way. If a package version changes, it can be updated here rather than needing changes in multiple files. \\n\\n- Provides an overview of the technologies/features the project relies on by listing the packages it uses.\\n\\n- Helps avoid dependency conflicts by specifying exact versions rather than allowing multiple versions of the same package to be installed.\\n\\nSo in summary, the main functions are to:\\n\\n1. Declare project dependencies \\n2. Ensure dependencies are installed correctly\\n3. Centralize dependency management\\n4. Avoid dependency conflicts\\n5. Document project capabilities\&quot;,\&quot;/Assets/PlayerMovement.cs\&quot;:\&quot;This PlayerMovement.cs script handles all movement and physics related logic for the player character.\\n\\nKey functions:\\n\\n- HandleAllMovement() - Main movement handler that calls all other movement functions.\\n\\n- HandleMovement() - Calculates movement direction and speed and applies force.\\n\\n- HandleRotation() - Rotates the player based on input to look/move direction. \\n\\n- HandleFallingAndLanding() - Handles falling, gravity, ground detection with raycasts.\\n\\n- HandleJumping() - Handles jumping logic and forces.\\n\\n- HandleHalfLash() - Handles half-lashing movement. \\n\\n- HandleLash() - Handles full lashing state change.\\n\\n- HandleGravity() - Applies gravity force based on grounded/air state. \\n\\n- OnCollisionEnter() - Handles ground collision and sets grounded state.\\n\\nIt calculates movement inputs, applies forces for movement, jumping, gravity. Manages grounded/air states. Handles player rotation. Includes debug gizmos for visualizing forces and vectors.\\n\\nSo in summary, it handles all the core physics-based movement and interaction logic for the player character.\&quot;,\&quot;/Assets/ResetGravitySwitch.cs\&quot;:\&quot;This file contains a script that resets the gravity switching when exiting an animation state.\\n\\nKey functions:\\n\\n- ResetGravitySwitch is a StateMachineBehaviour that is attached to an animation state.\\n\\n- OnStateExit is called when the animation state exits. \\n\\n- It sets the \\\&quot;isGravitySwitching\\\&quot; boolean on the Animator to false, which resets the gravity switching. \\n\\nSo in summary, this script ends the gravity switching effect by resetting a boolean flag when the attached animation state finishes playing. This ensures gravity returns to normal after the animation that toggled it is complete.\&quot;,\&quot;/README.md\&quot;:\&quot;This README.md file is used to provide information about the 3rd-Person-Fight-Game project.\\n\\nSome key things it likely contains:\\n\\n- Project Description - A brief overview of what the game is and what it does.\\n\\n- Installation Instructions - Steps required to install and run the game, including any dependencies. \\n\\n- Usage Instructions - How to play the game and what the basic controls/mechanics are.\\n\\n- Contributing Guidelines - Information for other developers on how to contribute code/assets to the project.\\n\\n- License Information - What license the project is released under (e.g. MIT).\\n\\n- Credits - Who worked on the project and their roles.\\n\\n- Future Plans - Planned features, improvements or changes for future releases.\\n\\n- Bug Reporting - Where issues can be reported and the bug fixing process. \\n\\n- Contact Information - Where to get in touch with the developers.\\n\\nSo in summary, the README provides important documentation to help users and other developers understand, install, use and contribute to the 3rd-person fight game project. It centralizes key information about the project in a common place.\&quot;,\&quot;/Assets/CameraManager.cs\&quot;:\&quot;This CameraManager script controls the camera in a 3D game.\\n\\nKey functions:\\n\\n- Awake(): Finds references to other components like the player and input manager.\\n\\n- HandleAllCameraMovement(): Main update function that calls all camera movement functions.\\n\\n- FollowTarget(): Moves the camera transform to follow the target transform (usually the player).\\n\\n- RotateCamera(): Rotates the camera based on input and player rotation. Handles pitch and yaw angles. \\n\\n- HandleCameraCollisions(): Performs a sphere cast to check for collisions and adjusts the camera position if it hits an object. Prevents the camera from passing through walls.\\n\\n- Variables to control camera offset, speeds, collision properties etc.\\n\\nSo in summary, it handles:\\n\\n- Following and tracking the target object (player)\\n- Rotating the camera based on input \\n- Detecting and resolving collisions to prevent the camera from clipping through walls/objects.\\n\\nThis allows it to smoothly control the 3D camera movement and positioning behind the player in the scene.\&quot;,\&quot;/Assets/PlayerInputActions.cs\&quot;:\&quot;This file defines the input actions and bindings for a player character and UI in a game.\\n\\nKey things it does:\\n\\n- Defines two InputActionMaps - one for player input and one for UI input\\n- Lists the input actions for each map (e.g. Move, Look, Jump for player)\\n- Defines the input bindings for each action (e.g. WASD keys, gamepad sticks for Move)\\n- Generates C# classes and properties to access the actions and maps\\n- Allows registering callbacks to receive input events for the actions\\n\\nKey functions:\\n\\n- PlayerActions/UIActions classes - provide access to input actions\\n- FindAction() - gets a reference to a named action \\n- AddCallbacks()/RemoveCallbacks() - register/unregister event callbacks\\n- controlSchemes - defines common control schemes like keyboard/mouse\\n- bindingMask/devices properties - customize input bindings and devices\\n- Enable()/Disable() - enable/disable input for the maps\\n\\nSo in summary, it defines all the player and UI input definitions and bindings, and provides an API to interact with input in code via the generated classes.\&quot;,\&quot;/Assets/AnimatorManager.cs\&quot;:\&quot;This AnimatorManager script controls character animation in Unity using an Animator component.\\n\\nKey functions:\\n\\n- Awake() - Gets a reference to the Animator component and sets up blend tree parameter names.\\n\\n- PlayTargetAnimation() - Plays a specific animation clip and sets an interacting bool.\\n\\n- UpdateAnimatorValues() - Takes in movement input and sprinting state. Performs animation snapping on input values and sets the snapped values on the blend tree parameters. \\n\\n- Animation snapping logic - Rounds float values for horizontal and vertical input to discrete values of -1, -0.5, 0, 0.5, 1 to play different animation states.\\n\\n- Sets sprint state to override vertical input to a constant value of 2. \\n\\n- Sets blend tree parameter values on the Animator component each frame to drive animation blending based on input.\\n\\nSo in summary, it handles mapping player input to blend tree parameters for controlling character animation states and blending on the Animator component.\&quot;}&quot;}" />
  </component>
</project>